"use client";
import { useMemo, useState } from "react";

/** ------- YOUR MARKETS ------- */
const MARKETS = [
  { key: "sita", label: "Sita" },
  { key: "kamal", label: "Kamal" },
  { key: "andhra", label: "Andhra" },
  { key: "star-tara", label: "Star Tara" },
  { key: "sridevi", label: "Sridevi" },
  { key: "mahadevi", label: "Mahadevi" },
];

/** ---------- FIRE LOGIC (from your HTML tool) ----------
 * 9 jodis (M,D,N × Day1,Day2,Day3) -> digit freq (0-9) -> top 3
 * Valid jodi: "00".."99" ; or ** to skip.
 * Single "0" is treated as "00" (for safety).
 */
function computeTop3Digits(jodis: string[]): { top: number[]; freq: number[]; error?: string } {
  // Validate
  for (const j of jodis) {
    if (j === "**") continue;
    if (!/^\d{2}$/.test(j)) {
      if (j === "0") continue; // we'll coerce to "00" below
      return { top: [], freq: [], error: "गलत jodi फ़ॉर्मैट! 2-digit (जैसे 07, 00) या ** यूज़ करें." };
    }
  }
  // Collect digits
  const digits: number[] = [];
  for (let j of jodis) {
    if (j === "**") continue;
    if (j === "0") j = "00";
    digits.push(parseInt(j[0], 10));
    digits.push(parseInt(j[1], 10));
  }
  if (digits.length === 0) {
    return { top: [], freq: [], error: "कोई वैध jodi नहीं मिली!" };
  }
  // Frequency
  const freq = Array(10).fill(0);
  for (const d of digits) freq[d]++;

  // Rank with tie-breaker
  const arr = [...Array(10)].map((_, d) => ({ d, c: freq[d] }));
  arr.sort((a, b) => (b.c - a.c) || (Math.random() - 0.5));
  const top = arr.slice(0, 3).map(x => x.d);
  return { top, freq };
}

/** -------- Modal Component (simple, no package) -------- */
function MarketPredictModal({
  open,
  onClose,
  marketLabel,
}: {
  open: boolean;
  onClose: () => void;
  marketLabel: string;
}) {
  const [inputs, setInputs] = useState({
    morning_day1: "",
    day_day1: "",
    night_day1: "",
    morning_day2: "",
    day_day2: "",
    night_day2: "",
    morning_day3: "",
    day_day3: "",
    night_day3: "",
  });
  const [result, setResult] = useState<{ top: number[]; error?: string } | null>(null);

  function setVal(key: keyof typeof inputs, v: string) {
    setInputs(s => ({ ...s, [key]: v.toUpperCase() }));
  }
  function gen() {
    const list = Object.values(inputs).map(x => x.trim());
    const { top, error } = computeTop3Digits(list);
    setResult(error ? { top: [], error } : { top });
  }

  if (!open) return null;
  return (
    <div className="fixed inset-0 z-[60] grid place-items-center bg-black/60 p-4" onClick={onClose}>
      <div
        className="w-full max-w-2xl rounded-2xl border border-white/10 bg-[#111217] p-5 shadow-xl"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="mb-4 flex items-center justify-between">
          <h3 className="text-lg font-bold">
            {marketLabel}: Fire Logic Prediction
          </h3>
          <button
            className="rounded-lg border border-white/10 px-2 py-1 text-sm hover:bg-white/10"
            onClick={onClose}
          >
            ✕ Close
          </button>
        </div>

        {/* Inputs grid: Morning / Day / Night × Day1/2/3 */}
        <div className="rounded-xl border border-white/10 bg-white/5 p-4">
          <div className="grid grid-cols-4 gap-2 text-sm font-semibold text-white/70">
            <div />
            <div className="text-center">Day 1</div>
            <div className="text-center">Day 2</div>
            <div className="text-center">Day 3</div>

            {[
              ["Morning", "morning_day1", "morning_day2", "morning_day3"],
              ["Day", "day_day1", "day_day2", "day_day3"],
              ["Night", "night_day1", "night_day2", "night_day3"],
            ].map((row) => (
              <>
                <div className="py-2">{row[0]}</div>
                {[1, 2, 3].map((i) => {
                  const key = row[i] as keyof typeof inputs;
                  return (
                    <input
                      key={key}
                      placeholder="07 / 00 / **"
                      value={inputs[key]}
                      onChange={(e) => setVal(key, e.target.value)}
                      className="rounded-lg bg-[#14141c] border border-white/10 p-2 text-center outline-none focus:ring-2 focus:ring-orange-400/60"
                    />
                  );
                })}
              </>
            ))}
          </div>
          <p className="mt-2 text-xs text-white/60">
            Format: <b>00–99</b> या <b>**</b> (missing). Single <b>0</b> को <b>00</b> माना जाएगा.
          </p>
        </div>

        <div className="mt-4 flex justify-end">
          <button
            onClick={gen}
            className="rounded-xl bg-orange-500 px-4 py-2 font-semibold hover:bg-orange-600"
          >
            Generate 3 Digits
          </button>
        </div>

        {/* Result */}
        <div className="mt-4 rounded-xl border border-white/10 bg-white/5 p-4">
          {!result ? (
            <div className="text-white/70 text-sm">
              ऊपर 9 जॉडी भरें और <b>Generate 3 Digits</b> दबाएँ.
            </div>
          ) : result.error ? (
            <div className="text-red-300 text-sm">{result.error}</div>
          ) : (
            <div className="space-y-3">
              <div className="text-sm text-white/80">Top-3 Digits</div>
              <div className="flex gap-2">
                {result.top.map((d, i) => (
                  <span
                    key={i}
                    className="rounded-xl border border-white/10 bg-white/10 px-4 py-2 text-lg font-bold"
                  >
                    {d}
                  </span>
                ))}
              </div>
              <p className="text-xs text-white/60">
                Rule: पिछले 3 दिनों (M/D/N) की जॉडी से 0–9 digit-freq, ties पर random break → Top-3.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default function HomePage() {
  const today = useMemo(() => new Date().toISOString().slice(0, 10), []);
  const [date, setDate] = useState(today);
  const [activeMarket, setActiveMarket] = useState<string | null>(null);

  return (
    <div className="min-h-[100dvh] w-full bg-[#0b0b0f] text-white">
      {/* BG */}
      <div className="pointer-events-none absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -left-40 h-[35rem] w-[35rem] rounded-full bg-gradient-to-br from-orange-500/20 via-pink-500/10 to-transparent blur-3xl" />
        <div className="absolute -bottom-40 -right-40 h-[30rem] w-[30rem] rounded-full bg-gradient-to-tr from-cyan-500/15 via-blue-500/10 to-transparent blur-3xl" />
      </div>

      <main className="relative mx-auto max-w-6xl px-4 py-10">
        {/* Header */}
        <header className="mb-10 text-center">
          <h1 className="text-3xl sm:text-4xl font-extrabold tracking-tight bg-gradient-to-r from-amber-200 via-rose-200 to-orange-300 bg-clip-text text-transparent">
            Real Matka
          </h1>
          <p className="mt-2 text-sm text-white/70">
            Daily Guessing — <span className="text-orange-300">Open</span> /{" "}
            <span className="text-sky-300">Close</span>
          </p>
          <div className="mt-4 flex justify-center">
            <input
              type="date"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              className="rounded-xl bg-[#14141c] border border-white/10 px-3 py-1 text-sm outline-none focus:ring-2 focus:ring-orange-400/60"
            />
          </div>
        </header>

        {/* Market Grid with Predict button */}
        <section className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {MARKETS.map((m) => (
            <div
              key={m.key}
              className="relative rounded-2xl border border-white/10 bg-gradient-to-br from-white/5 to-white/[0.03] p-6 backdrop-blur-sm hover:border-white/20 hover:shadow-[0_0_20px_-4px_rgba(255,255,255,0.15)] transition-all"
            >
              <h2 className="text-lg font-bold text-center mb-4 bg-gradient-to-r from-orange-300 to-amber-200 bg-clip-text text-transparent">
                {m.label}
              </h2>

              <div className="text-center text-white/70 text-xs mb-4">
                Select date: <span className="text-white/90">{date}</span>
              </div>

              <button
                onClick={() => setActiveMarket(m.key)}
                className="w-full rounded-xl bg-orange-500 px-4 py-2 font-semibold hover:bg-orange-600"
              >
                Predict (Fire Logic)
              </button>
            </div>
          ))}
        </section>

        {/* How it works */}
        <section className="mt-12 rounded-2xl border border-white/10 bg-white/5 p-6">
          <h3 className="text-lg font-semibold mb-3">
            Fire Logic कैसे काम करता है?
          </h3>
          <ol className="list-decimal pl-5 space-y-2 text-sm text-white/85">
            <li>आख़िरी 3 वैध दिनों के Morning/Day/Night की 9 जोड़ियाँ लें (missing पर **).</li>
            <li>हर जॉडी के दोनों digits (0–9) की frequency निकालें.</li>
            <li>सबसे ज़्यादा आने वाले Top-3 digits = आज की prediction.</li>
            <li>टाई होने पर हल्का random tie-break (same जैसा आपके HTML टूल में है).</li>
          </ol>
        </section>

        <footer className="mt-10 text-center text-xs text-white/60">
          Disclaimer: यह शैक्षिक जानकारी है; गारंटी नहीं. 18+ only. स्थानीय नियमों का पालन करें.
        </footer>
      </main>

      {/* Modal mount */}
      {activeMarket && (
        <MarketPredictModal
          open={true}
          marketLabel={MARKETS.find((m) => m.key === activeMarket)!.label}
          onClose={() => setActiveMarket(null)}
        />
      )}
    </div>
  );
}
